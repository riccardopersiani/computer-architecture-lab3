PUBLIC _countweeks
.MODEL small, C
.STACK

.DATA
CALENDAR DB 31,28,31,30,31,30,31,31,30,31,30,31

DAY DB ?
MONTH DB ?
YEAR DB ?
TOT_DAYS DW ?

.CODE

_countweeks PROC NEAR

		PUSH BP
		MOV BP,SP
		
		; CONVERT DAY FROM STRING TO NUMBER
		MOV SI, [BP+4]
		PUSH AX		; RESERVES FREE SPACE FOR THE RETURN VALUE
		PUSH SI		; STARTING ADDRESS OF THE STRING
		CALL CONVERT
		POP SI
		POP AX
		MOV DAY, AL
		
		; CONVERT MONTH FROM STRING TO NUMBER
		ADD SI, 3	; TO GET THE RIGHT POSITION
		PUSH AX		; RESERVES FREE SPACE FOR THE RETURN VALUE
		PUSH SI		; STARTING ADDRESS OF THE STRING
		CALL CONVERT
		POP SI
		POP AX
		MOV MONTH, AL
		
		; CONVERT YEAR FROM STRING TO NUMBER
		ADD SI, 3	; TO GET THE RIGHT POSITION
		PUSH AX		; RESERVES FREE SPACE FOR THE RETURN VALUE
		PUSH SI		; STARTING ADDRESS OF THE STRING
		CALL CONVERT
		POP SI
		POP AX
		MOV YEAR, AL
		
		CMP YEAR, 0	; IF YEAR=2000 CONSIDER JUST 2000'S MONTHS
		JE NEXT_COUNT
		XOR AX,AX
		MOV AL, YEAR
		;DEC AL		; CONSIDER ONLY PREVIOUS YEARS
		MOV BX, 365
		MUL BX		; AX <- TOTAL NUMBER OF DAYS ELAPSED IN PREVIOUS YEARS
		MOV TOT_DAYS, AX
	
	NEXT_COUNT:
		; COMPUTE THE NUMBER OF DAYS ELAPSED DURING THE CURRENT YEAR EXCLUDED THE CURRENT MONTH
		XOR CX, CX
		MOV CL, MONTH
		SUB CL, 1
		LEA SI, CALENDAR
		XOR AH, AH
		
		COUNT_DAYS:
			CMP CX, 0
			JE NEXT_COUNT2
			MOV AL, [SI]
			ADD TOT_DAYS, AX	; TOT_DAYS += DAYS OF THE CONSIDERED MONTH
			INC SI
			DEC CX
			JMP COUNT_DAYS
	
	NEXT_COUNT2:
		; SUM UP THE DAY ELAPSED IN THE CURRENT MONTH
		XOR AX, AX
		MOV AL, DAY
		ADD TOT_DAYS, AX
		
		XOR CX, CX
		
		COUNT_LEAP_YEARS:
			CMP CL, YEAR
			JAE NEXT_COUNT3
			INC TOT_DAYS	; IF THE CONSIDERED YEAR IS LEAP ADD 1 MORE DAY
			ADD CL, 4		; MOVE THROUGH LEAP-YEARS
			JMP COUNT_LEAP_YEARS
	
	NEXT_COUNT3:
		XOR AX, AX
		MOV AL, YEAR
		MOV DH, 4
		DIV DH
		CMP AH, 0		; CHECK IF THE CURRENT YEAR IS LEAP THEN CHECK THE CURRENT MONTH
		JNE NEXT_COUNT4
		CMP MONTH, 3	; IF MONTH IS AFTER FEBRUARY THEN ADD 1 MORE DAY
		JB NEXT_COUNT4
		INC TOT_DAYS
	
	NEXT_COUNT4: 
	    MOV DX, 0
		MOV AX, TOT_DAYS
		MOV BX, 7
		DIV BX		; COMPUTE THE NUMBER OF WEEKS!
		
		; AX <- THE RETURN VALUE FOR C
		
		POP BP
		RET
_countweeks ENDP


CONVERT PROC
	PUSH BP
	MOV BP,SP
	PUSH AX
	PUSH BX
	PUSH SI
	
	MOV SI, [BP+4]	; SI <- THE START ADDRESS OF THE STRING
	
	MOV AX, [SI]
	SUB AL, '0'
	MOV BL, 10
	MUL BL
	
	MOV BX, [SI+1]
	SUB BL, '0'
	ADD AL, BL
	
	MOV [BP+6], AX	; STORE THE RESULT IN THE STACK
	
	POP SI
	POP BX
	POP AX
	POP BP
	RET	
CONVERT ENDP


END